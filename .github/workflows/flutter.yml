name: Flutter Build and Release

on:
  push:
    tags:
      - "v*"

env:
  APP_NAME: thu_downloader

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            build-command: flutter build linux --release
            artifact-path: build/linux/x64/release/bundle
            asset-name-deb: thu-downloader_${{ github.ref_name }}_amd64.deb
            asset-name-rpm: thu-downloader-${{ github.ref_name }}-1.x86_64.rpm
            setup-commands: |
              sudo apt-get update -y
              sudo apt-get install -y ninja-build libgtk-3-dev rpm
          - os: windows-latest
            platform: windows
            build-command: flutter build windows --release
            artifact-path: build/windows/x64/runner/Release
            asset-name: thu_downloader-${{ github.ref_name }}-windows-x64-installer.exe
            setup-commands: ""
          - os: macos-latest
            platform: macos
            build-command: flutter build macos --release
            artifact-path: build/macos/Build/Products/Release
            asset-name: thu_downloader-${{ github.ref_name }}-macos.dmg
            setup-commands: ""

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
        shell: bash

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Platform-specific setup
        if: matrix.setup-commands != ''
        run: ${{ matrix.setup-commands }}

      - name: Get Flutter dependencies
        working-directory: thu_downloader
        run: flutter pub get

      - name: Build Localization
        working-directory: thu_downloader
        run: make build-l10n

      - name: Build Flutter app
        working-directory: thu_downloader
        run: ${{ matrix.build-command }}

      # Linux-specific steps
      - name: Build Linux packages (DEB and RPM)
        if: matrix.platform == 'linux'
        working-directory: thu_downloader
        run: |
          # Make build script executable
          chmod +x scripts/build_linux_packages.sh
          
          # Build DEB and RPM packages
          scripts/build_linux_packages.sh ${{ steps.version.outputs.version }} ${{ matrix.artifact-path }}

      # Windows-specific steps
      - name: Setup Windows installer
        if: matrix.platform == 'windows'
        working-directory: thu_downloader
        run: |
          cp scripts/windows_installer/* ${{ matrix.artifact-path }}

      - name: Build Windows installer
        if: matrix.platform == 'windows'
        working-directory: thu_downloader/${{ matrix.artifact-path }}
        run: |
          iscc /F"thu_downloader-${{ github.ref_name }}-windows-x64-installer" inno_setup_config.iss /DAppVersion=${{ steps.version.outputs.version }}

      # macOS-specific steps
      - name: Code sign macOS app
        if: matrix.platform == 'macos' && env.MACOS_CERTIFICATE != ''
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_PASSWD: ${{ secrets.MACOS_PASSWD }}
          MACOS_DENTITY: ${{ secrets.MACOS_DENTITY }}
        run: |
          # Create certificate file
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          
          # Create and configure keychain
          security create-keychain -p "$MACOS_PASSWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_PASSWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_PASSWD" build.keychain
          
          # Code sign the app
          codesign --deep --force --verbose -s "$MACOS_DENTITY" "thu_downloader/${{ matrix.artifact-path }}/${{ env.APP_NAME }}.app"
          
          # Clean up certificate file
          rm certificate.p12

      - name: Create macOS DMG
        if: matrix.platform == 'macos'
        working-directory: thu_downloader/${{ matrix.artifact-path }}
        run: |
          brew install create-dmg
          create-dmg \
            --volname "${{ env.APP_NAME }}" \
            --window-pos 200 120 \
            --window-size 800 529 \
            --icon-size 130 \
            --text-size 14 \
            --icon "${{ env.APP_NAME }}.app" 260 250 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 540 250 \
            --hdiutil-quiet \
            "${{ matrix.asset-name }}" \
            "${{ env.APP_NAME }}.app"

      - name: Extract release notes
        id: release_notes
        run: |
          # Extract release notes for this version from CHANGELOG.md
          VERSION="${{ steps.version.outputs.version }}"
          NOTES=$(awk "/^## v${VERSION}$/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            NOTES="Release ${{ github.ref_name }} for ${{ matrix.platform }}"
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload and Release for ${{ matrix.platform }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            ${{ matrix.platform == 'linux' && format('thu_downloader/{0}', matrix.asset-name-deb) || '' }}
            ${{ matrix.platform == 'linux' && format('thu_downloader/{0}', matrix.asset-name-rpm) || '' }}
            ${{ matrix.platform == 'windows' && format('thu_downloader/{0}/Output/{1}', matrix.artifact-path, matrix.asset-name) || '' }}
            ${{ matrix.platform == 'macos' && format('thu_downloader/{0}/{1}', matrix.artifact-path, matrix.asset-name) || '' }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}